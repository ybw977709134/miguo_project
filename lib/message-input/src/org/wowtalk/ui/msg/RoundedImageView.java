package org.wowtalk.ui.msg;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.*;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;

public class RoundedImageView extends ImageView {
    //public static final String TAG = "RoundedImageView";
    
    public static final int DEFAULT_RADIUS = 10;
    public static final int DEFAULT_BORDER = 1;
    public static final int DEFAULT_BORDER_COLOR = Color.rgb(0xe0,0xe0,0xe0);
    
    private int mCornerRadius;
    private int mBorderWidth;
    private int mBorderColor;
    
    //control if background should be drawn
    private boolean roundBackground;
    
    //control if the image will be dimmed when action_down encountered
    private boolean clickDim=true;

    // inputted by external, for backup
    private Drawable mDrawableOrig = null;
    // generated by us, for displaying
    private Drawable mDrawable;

    private Drawable mBackgroundDrawable;
    
    private ScaleType mScaleType;

    private View.OnClickListener onClickListener;
    private View.OnLongClickListener onLongClickListener;
    private final static long LONG_CLICK_TRIGGER_INTERVAL=1*1000;

    private final static int LONG_CLICK_TRIGGER_MSG_ID=1;
    private Handler timerHandler = new Handler() {
        public void handleMessage(Message msg) {
            if (msg.what == LONG_CLICK_TRIGGER_MSG_ID) {
                if(null != onLongClickListener) {
                    onLongClickListener.onLongClick(RoundedImageView.this);
                }
            }
        }
    };

    private static final ScaleType[] sScaleTypeArray = {
            ScaleType.MATRIX,
            ScaleType.FIT_XY,
            ScaleType.FIT_START,
            ScaleType.FIT_CENTER,
            ScaleType.FIT_END,
            ScaleType.CENTER,
            ScaleType.CENTER_CROP,
            ScaleType.CENTER_INSIDE
    };
    
    public RoundedImageView(Context context) {
        super(context);
        mCornerRadius = DEFAULT_RADIUS;
        mBorderWidth = DEFAULT_BORDER;
        mBorderColor = DEFAULT_BORDER_COLOR;
    }

    public RoundedImageView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public RoundedImageView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.RoundedImageView, defStyle, 0);

        int index = a.getInt(R.styleable.RoundedImageView_android_scaleType, -1);
        if (index >= 0) {
            setScaleType(sScaleTypeArray[index]);
        }
        
        mCornerRadius = a.getDimensionPixelSize(R.styleable.RoundedImageView_corner_radius, -1);
        mBorderWidth = a.getDimensionPixelSize(R.styleable.RoundedImageView_border_width, -1);
        
        // don't allow negative values for radius and border
        if (mCornerRadius < 0) { mCornerRadius = DEFAULT_RADIUS; }
        if (mBorderWidth < 0) { mBorderWidth = DEFAULT_BORDER; }
        
        mBorderColor = a.getColor(R.styleable.RoundedImageView_border_color, DEFAULT_BORDER_COLOR);
        
        roundBackground = a.getBoolean(R.styleable.RoundedImageView_round_background, false);
        
        clickDim=a.getBoolean(R.styleable.RoundedImageView_click_dim, true);
        
        a.recycle();
    }

    @Override
    public void setOnClickListener(View.OnClickListener l) {
        onClickListener=l;
    }

    @Override
    public void setOnLongClickListener(View.OnLongClickListener l) {
        onLongClickListener=l;
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if(null == onClickListener && null == onLongClickListener) {
            return super.onTouchEvent(event);
        } else {
            switch(event.getAction()) {
                case MotionEvent.ACTION_DOWN://when down, make the image darker
//                    Log.w("rounded image view action down");
                    makeImageDim();

                    //if long click listener is set,send delayed msg to trigger it
                    if(null != onLongClickListener) {
//                        Log.w("send long click msg");
                        Message msg = Message.obtain();
                        msg.what = LONG_CLICK_TRIGGER_MSG_ID;
                        timerHandler.removeMessages(LONG_CLICK_TRIGGER_MSG_ID);
                        timerHandler.sendMessageDelayed(msg, LONG_CLICK_TRIGGER_INTERVAL);
                    }
                    break;
                case MotionEvent.ACTION_CANCEL://cancel or up,revert the image to origin
//                    Log.w("rounded image view action cancel");
                    revert2originImage();
                    break;
                case MotionEvent.ACTION_UP:
//                    Log.w("rounded image view action up");
                    revert2originImage();

                    if(null != onLongClickListener) {
                        timerHandler.removeMessages(LONG_CLICK_TRIGGER_MSG_ID);
                    }

                    if(null != onClickListener) {
                        onClickListener.onClick(this);
                    }
                    break;
                default:
                    break;
            }
            return true;
        }
    }
    
    private void makeImageDim() {
        float[] colorFilters;
        ColorMatrix colorMatrix;
        ColorMatrixColorFilter cmcf;
        
        float multiFactor=0.7f;
        float addFactor=0;
        
        if(!clickDim) {
            return;
        }
        
        colorFilters=new float[]{
                multiFactor,0,0,0,addFactor,
                0,multiFactor,0,0,addFactor,
                0,0,multiFactor,0,addFactor,
                0,0,0,1.0f,0};
        colorMatrix=new ColorMatrix(colorFilters);
        cmcf=new ColorMatrixColorFilter(colorMatrix);
        if (mDrawable instanceof RoundedDrawable) {
            ((RoundedDrawable) mDrawable).setColorFilter(cmcf);
        }
        invalidate();
    }
    
    private void revert2originImage() {
        float[] colorFilters;
        ColorMatrix colorMatrix;
        ColorMatrixColorFilter cmcf;
        
        if(!clickDim) {
            return;
        }
        
        colorFilters=new float[]{
                1.0f,0,0,0,0,
                0,1.0f,0,0,0,
                0,0,1.0f,0,0,
                0,0,0,1.0f,0};
        colorMatrix=new ColorMatrix(colorFilters);
        cmcf=new ColorMatrixColorFilter(colorMatrix);
        if (mDrawable instanceof RoundedDrawable) {
            ((RoundedDrawable) mDrawable).setColorFilter(cmcf);
        }
        invalidate();
    }
    
    public void setClickDim(boolean dim) {
        clickDim=dim;
    }
    
    public boolean isClickDim() {
        return clickDim;
    }
    
    /**
     * Controls how the image should be resized or moved to match the size
     * of this ImageView.
     * 
     * @param scaleType The desired scaling mode.
     * 
     * @attr ref android.R.styleable#ImageView_scaleType
     */
    @Override
    public void setScaleType(ScaleType scaleType) {
        if (scaleType == null) {
            throw new NullPointerException();
        }
        
        if (mScaleType != scaleType) {
            mScaleType = scaleType;
        
            switch(scaleType) {
                case CENTER:
                case CENTER_CROP:
                case CENTER_INSIDE:
                case FIT_CENTER:
                case FIT_START:
                case FIT_END:
                case FIT_XY:
                    super.setScaleType(ScaleType.FIT_XY);
                    break;
                default:
                    super.setScaleType(scaleType);
                    break;
            }
            
            if (mDrawable instanceof RoundedDrawable
                    && ((RoundedDrawable) mDrawable).getScaleType() != scaleType) {
                ((RoundedDrawable) mDrawable).setScaleType(scaleType);
            }
            
            if (mBackgroundDrawable instanceof RoundedDrawable
                    && ((RoundedDrawable) mBackgroundDrawable).getScaleType() != scaleType) {
                ((RoundedDrawable) mBackgroundDrawable).setScaleType(scaleType);
            }
            setWillNotCacheDrawing(true);
            requestLayout();
            invalidate();
        }
    }
    
    /**
     * Return the current scale type in use by this ImageView.
     *
     * @see ImageView.ScaleType
     *
     * @attr ref android.R.styleable#ImageView_scaleType
     */
    @Override
    public ScaleType getScaleType() {
        return mScaleType;
    }

    @Override
    public void setImageResource(int resid) {
        setImageBitmap(BitmapFactory.decodeResource(getResources(), resid));
    }

    /**
     * Convert input Drawable to RoundedDrawable.
     * @param drawable
     */
    @Override
    public void setImageDrawable(Drawable drawable) {
        if (drawable != null) {
            mDrawable = RoundedDrawable.fromDrawable(drawable, mCornerRadius, mBorderWidth, mBorderColor);
            if (mDrawable instanceof RoundedDrawable) {
                ((RoundedDrawable) mDrawable).setScaleType(mScaleType);
                ((RoundedDrawable) mDrawable).setCornerRadius(mCornerRadius);
                ((RoundedDrawable) mDrawable).setBorderWidth(mBorderWidth);
                ((RoundedDrawable) mDrawable).setBorderColor(mBorderColor);
            }
        } else {
             mDrawable = null;
        }
        mDrawableOrig = drawable;
        super.setImageDrawable(mDrawable);
    }

    /**
     * Return the inputted drawable.
     * @return
     */
    @Override
    public Drawable getDrawable() {
        return mDrawableOrig == null ? super.getDrawable() : mDrawableOrig;
    }

    @Override
    public void setImageBitmap(Bitmap bm) {
        if (bm != null) {
            mDrawable = new RoundedDrawable(bm, mCornerRadius, mBorderWidth, mBorderColor);
            if (mDrawable instanceof RoundedDrawable) {
                ((RoundedDrawable) mDrawable).setScaleType(mScaleType);
                ((RoundedDrawable) mDrawable).setCornerRadius(mCornerRadius);
                ((RoundedDrawable) mDrawable).setBorderWidth(mBorderWidth);
                ((RoundedDrawable) mDrawable).setBorderColor(mBorderColor);
            }
        } else {
            mDrawable = null;
        }
        super.setImageDrawable(mDrawable);
    }

    /*@Override
    public void setBackground(Drawable background) {
        setBackgroundDrawable(background);
    }*/

    @Override
    @Deprecated
    public void setBackgroundDrawable(Drawable background) {
        if (roundBackground && background != null) {
            mBackgroundDrawable = RoundedDrawable.fromDrawable(background, mCornerRadius, mBorderWidth, mBorderColor);
            ((RoundedDrawable) mBackgroundDrawable).setScaleType(mScaleType);
            ((RoundedDrawable) mBackgroundDrawable).setCornerRadius(mCornerRadius);
            ((RoundedDrawable) mBackgroundDrawable).setBorderWidth(mBorderWidth);
            ((RoundedDrawable) mBackgroundDrawable).setBorderColor(mBorderColor);
        } else {
            mBackgroundDrawable = background;
        }
        super.setBackgroundDrawable(mBackgroundDrawable);
    }

    public int getCornerRadius() {
        return mCornerRadius;
    }

    public int getBorderWidth() {
        return mBorderWidth;
    }

    public int getBorderColor() {
        return mBorderColor;
    }

    public void setCornerRadius(int radius) {
        if (mCornerRadius == radius) { return; }
        
        this.mCornerRadius = radius;
        if (mDrawable instanceof RoundedDrawable) {
            ((RoundedDrawable) mDrawable).setCornerRadius(radius);
        }
        if (roundBackground && mBackgroundDrawable instanceof RoundedDrawable) {
            ((RoundedDrawable) mBackgroundDrawable).setCornerRadius(radius);
        }
    }

    public void setBorderWidth(int width) {
        if (mBorderWidth == width) { return; }
        
        this.mBorderWidth = width;
        if (mDrawable instanceof RoundedDrawable) {
            ((RoundedDrawable) mDrawable).setBorderWidth(width);
        }
        if (roundBackground && mBackgroundDrawable instanceof RoundedDrawable) {
            ((RoundedDrawable) mBackgroundDrawable).setBorderWidth(width);
        }
        invalidate();
    }

    public void setBorderColor(int color) {
        if (mBorderColor == color) { return; }
        
        this.mBorderColor = color;
        if (mDrawable instanceof RoundedDrawable) {
            ((RoundedDrawable) mDrawable).setBorderColor(color);
        }
        if (roundBackground && mBackgroundDrawable instanceof RoundedDrawable) {
            ((RoundedDrawable) mBackgroundDrawable).setBorderColor(color);
        }
        if (mBorderWidth > 0) { invalidate(); }
    }

    public boolean isRoundBackground() {
        return roundBackground;
    }

    public void setRoundBackground(boolean roundBackground) {
        if (this.roundBackground == roundBackground) { return; }
        
        this.roundBackground = roundBackground;
        if (roundBackground) {
            if (mBackgroundDrawable instanceof RoundedDrawable) {
                ((RoundedDrawable) mBackgroundDrawable).setScaleType(mScaleType);
                ((RoundedDrawable) mBackgroundDrawable).setCornerRadius(mCornerRadius);
                ((RoundedDrawable) mBackgroundDrawable).setBorderWidth(mBorderWidth);
                ((RoundedDrawable) mBackgroundDrawable).setBorderColor(mBorderColor);
            } else {
                setBackgroundDrawable(mBackgroundDrawable);
            }
        } else if (mBackgroundDrawable instanceof RoundedDrawable) {
            ((RoundedDrawable) mBackgroundDrawable).setBorderWidth(0);
            ((RoundedDrawable) mBackgroundDrawable).setCornerRadius(0);
        }
        
        invalidate();
    }
}
